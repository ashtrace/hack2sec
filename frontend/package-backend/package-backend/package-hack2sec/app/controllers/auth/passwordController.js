const User              = require('../../model/User');
const Faculty           = require('../../model/Faculty');
const mailController    = require('../email/mailController');
const jwt               = require('jsonwebtoken');
const bcrypt            = require('bcrypt');

const handleForgotPassword = async (req, res) => {
    if (!req?.body?.email) {
        return res.status(400).json({ 'message': 'email is required.' });
    }

    try {

        const foundUser = await User.findOne({ email: req.body.email }).exec();
        const foundFaculty = await Faculty.findOne({ email: req.body.email }).exec();

        let user = null;

        if (!foundUser && !foundFaculty) {
            return res.status(400).json({ 'message': `No user exists with email ${req.body.email}` });
        } else if(foundUser) {
            user = foundUser;
        } else if(foundFaculty) {
            user = foundFaculty;
        }

        const payload = {
            id: user._id
        }

        const token = jwt.sign(
            payload,
            process.env.PASSWORD_RESET_TOKEN_SECRET,
            { expiresIn: process.env.PASSWORD_RESET_TOKEN_VALIDITY }
        )

        user.pwdResetToken = token;
        await user.save();

        const resetLink = `http://localhost:1337/forgot-password/${token}`

        /* Debug: log the password reset link */
        console.log(resetLink);

        /* Email the reset link */
        const subject = "Password Reset Request for Hack2Sec account."
        const body = {
            text: `Please open this link in new tab to reset your password. ${resetLink}`,
            html: `
            <html>
            <head>
                <style>
                p {
                    margin: 0;
                    padding: 0;
                }
                </style>
            </head>
            <body>
                <p>Greetings,</p>
                <p>A password-reset request has been requested for your Hack2Sec account. Please open the link in new tab to reset your password.</p>
                <p>${resetLink}</p>
                <p>This <strong>One-Time</strong> password reset link would be valid for ${process.env.PASSWORD_RESET_TOKEN_VALIDITY}.</p>
                <p>Please contact your local campus Hack2Sec administrator if this request was not generated by you.</p>
                <p>Regards,</p>
                <p>Team Hack2Sec</p>
            </body>
            </html>
            `
        }

        const mailed = mailController.sendmail(user.email, subject, body);

        if (mailed) {
            return res.json({ 'message': `Password reset mail sent at ${user.email}.` });
        } else {
            return res.status(500).json({ 'message': `Failed to send password reset mail at ${user.email}` });
        }

    } catch (err) {
        console.error(err);
        return res.status(500).json({ 'message': 'Failed while processing passwor reset request.' });
    }

}

const handleResetPassword = (req, res) => {
    if (!req?.params?.token) {
        return res.status(400).json({ 'message': 'Password reset token absent.' });
    }

    if (!req?.body?.password) {
        return res.status(400).json({ 'message': 'Password absent.' });
    }

    jwt.verify(
        req.params.token,
        process.env.PASSWORD_RESET_TOKEN_SECRET,
        async (err, decoded) => {
            try {
                const foundUser = await User.findById(decoded.id);
                const foundFaculty = await Faculty.findById(decoded.id);
        
                let user = null;
        
                if (!foundUser && !foundFaculty) {
                    return res.status(400).json({ 'message': `No user exists with id ${decoded.id}` });
                } else if(foundUser) {
                    user = foundUser;
                } else if(foundFaculty) {
                    user = foundFaculty;
                }

                if (user.pwdResetToken === req.params.token) {
                    const hashedPwd = await bcrypt.hash(req.body.password, 10);

                    user.password = hashedPwd;
                    user.pwdResetToken = undefined;
                    await user.save();

                    return res.status(201).json({ 'message': 'Password successfully updated.' });
                } else {
                    return res.status(403).json({ 'message': 'Invalid password reset token.' });
                }
            } catch (err) {
                console.error(err);
                return res.status(500).json({ 'message': 'Failed to reset password.' });
            }
        }
    )

}

module.exports = {
    handleForgotPassword,
    handleResetPassword
}